/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.7.v20170914
 * Generated at: 2017-10-29 20:01:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class timeChart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=GB18030");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=GB18030\">\n");
      out.write("    <script src=\"../js/echarts.common.min.js\"></script>\n");
      out.write("    <script src=\"../js/jquery.js\"></script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h2>销售量统计</h2>\n");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${words}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\n");
      out.write("<!-- 为ECharts准备一个具备大小（宽高）的Dom -->\n");
      out.write("<div id=\"main\" style=\"width: 100%;height:800px;\"></div>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("    $.ajax({\n");
      out.write("        url:'../spark/monthCount',\n");
      out.write("        dataType:\"json\",\n");
      out.write("        success:function(data,textStatus,jqXHR){\n");
      out.write("            \n");
      out.write("            var words = [];\n");
      out.write("            var nums = [];\n");
      out.write("\n");
      out.write("\n");
      out.write("            for(var i = 0;i < data.months.length; i++){\n");
      out.write("                words[i] = data.months[i][0];\n");
      out.write("                nums[i] = data.months[i][1];\n");
      out.write("            }\n");
      out.write("\n");
      out.write("\n");
      out.write("            // 基于准备好的dom，初始化echarts实例\n");
      out.write("            var myChart = echarts.init(document.getElementById('main'));\n");
      out.write("\n");
      out.write("            // 指定图表的配置项和数据\n");
      out.write("            option = {\n");
      out.write("                title: {\n");
      out.write("                    text: '按月份统计销售量',\n");
      out.write("                    left: 'center'\n");
      out.write("                },\n");
      out.write("                tooltip: {\n");
      out.write("                    trigger: 'item',\n");
      out.write("                    formatter: '{a} <br/>{b} : {c}'\n");
      out.write("                },\n");
      out.write("                legend: {\n");
      out.write("                    left: 'left',\n");
      out.write("                    data: ['销售量']\n");
      out.write("                },\n");
      out.write("                xAxis: {\n");
      out.write("                    type: 'category',\n");
      out.write("                    name: '时间',\n");
      out.write("                    splitLine: {show: false},\n");
      out.write("                    data: words\n");
      out.write("                },\n");
      out.write("                grid: {\n");
      out.write("                    left: '3%',\n");
      out.write("                    right: '4%',\n");
      out.write("                    bottom: '3%',\n");
      out.write("                    containLabel: true\n");
      out.write("                },\n");
      out.write("                yAxis: {\n");
      out.write("                    type: 'log',\n");
      out.write("                    name: '数量'\n");
      out.write("                },\n");
      out.write("                series: [\n");
      out.write("                    {\n");
      out.write("                        name: '3的指数',\n");
      out.write("                        type: 'line',\n");
      out.write("                        data: nums\n");
      out.write("                    },\n");
      out.write("                ]\n");
      out.write("            };\n");
      out.write("\n");
      out.write("\n");
      out.write("            // 使用刚指定的配置项和数据显示图表。\n");
      out.write("            myChart.setOption(option);\n");
      out.write("\n");
      out.write("        },\n");
      out.write("        error:function(xhr,textStatus){\n");
      out.write("            alert('错误')\n");
      out.write("        },\n");
      out.write("        complete:function(){\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    })\n");
      out.write("\n");
      out.write("\n");
      out.write("    //    myChart.setOption({\n");
      out.write("    //        series : [\n");
      out.write("    //            {\n");
      out.write("    //                name: '访问来源',\n");
      out.write("    //                type: 'pie',\n");
      out.write("    //                radius: '55%',\n");
      out.write("    //                data:[\n");
      out.write("    //                    {value:235, name:'视频广告'},\n");
      out.write("    //                    {value:274, name:'联盟广告'},\n");
      out.write("    //                    {value:310, name:'邮件营销'},\n");
      out.write("    //                    {value:335, name:'直接访问'},\n");
      out.write("    //                    {value:400, name:'搜索引擎'}\n");
      out.write("    //                ]\n");
      out.write("    //            }\n");
      out.write("    //        ]\n");
      out.write("    //    })\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
